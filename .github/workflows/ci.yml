name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up C++ compiler
      run: sudo apt-get install -y g++

    - name: Build the project
      run: |
        cd src
        make
        echo "Creating directory for the binary"
        cd ..
        mkdir -p artifacts/usr/bin
        cp src/main artifacts/usr/bin/
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: main
        path: artifacts/usr/bin/main
        
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: main
          
      - name: Run tests
        run: |
          chmod +x ./main
          chmod +x cicd/test_script.sh
          cicd/test_script.sh
  
  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: main
      
      - name: Build .deb package
        run: |
          sudo apt update && sudo apt install -y g++ build-essential debhelper
          dpkg-buildpackage -us -uc
          mkdir -p artifacts/deb
          mv ../*.deb artifacts/deb/
  
      - name: Upload .deb package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: artifacts/deb/*.deb

  deploy:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fibonacci-app:latest .

      - name: Run Docker container
        run: |
          docker run ${{ secrets.DOCKER_USERNAME }}/fibonacci-app:latest
      
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/fibonacci-app:latest
